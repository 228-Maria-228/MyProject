const Country = require('../models/country');
// Create and Save a new Country exports.create = (req, res) => { // Validate request if (!req.body.name) { res.status(400).send({ message: "Name can not be empty!" }); return; }
// Create a Country const country = new Country({ name: req.body.name, code: req.body.code, continent: req.body.continent, });
// Save Country in the database country .save(country) .then(data => { res.send(data); }) .catch(err => { res.status(500).send({ message: err.message || "Some error occurred while creating the Country." }); }); };
// Retrieve all Countries from the database. exports.findAll = (req, res) => { Country.find() .then(countries => { res.send(countries); }) .catch(err => { res.status(500).send({ message: err.message || "Some error occurred while retrieving countries." }); }); };
// Find a single Country with an id exports.findOne = (req, res) => { Country.findById(req.params.id) .then(country => { if (!country) { return res.status(404).send({ message: "Country not found with id " + req.params.id }); } res.send(country); }) .catch(err => { if (err.kind === 'ObjectId') { return res.status(404).send({ message: "Country not found with id " + req.params.id }); } return res.status(500).send({ message: "Error retrieving Country with id " + req.params.id }); }); };
// Update a Country with the specified id in the request exports.update = (req, res) => { // Validate Request if (!req.body.name) { return res.status(400).send({ message: "Name can not be empty!" }); }
// Find Country and update it with the request body Country.findByIdAndUpdate( req.params.id, { name: req.body.name, code: req.body.code, continent: req.body.continent, }, { new: true } ) .then(country => { if (!country) { return res.status(404).send({ message: "Country not found with id " + req.params.id }); } res.send(country); }) .catch(err => { if (err.kind === 'ObjectId') { return res.status(404).send({ message: "Country not found with id " + req.params.id }); } return res.status(500).send({ message: "Error updating Country with id " + req.params.id }); }); };
// Delete a Country with the specified id in the request exports.delete = (req, res) => { Country.findByIdAndRemove(req.params.id) .then(country => { if (!country) { return res.status(404).send({ message: "Country not found with id " + req.params.id }); } res.send({ message: "Country deleted successfully!" }); }) .catch(err => { if (err.kind === 'ObjectId' || err.name === 'NotFound') { return res.status(404).send({ message: "Country not found with id " + req.params.id }); } return res.status(500).send({ message: "Could not delete Country with id " + req.params.id }); }); };
// Delete all Countries from the database. exports.deleteAll = (req, res) => { Country.deleteMany({}) .then(response => { res.send({ message: ${response.deletedCount} Countries were deleted successfully! }); }) .catch(err => { res.status(500).send({ message: err.message || "Some error occurred while removing all countries." }); }); };
// Find all published Countries exports.findAllPublished = (req, res) => { Country.find({ isPublished: true }) .then(countries => { res.send(countries); }) .catch(err => { res.status(500).send({ message: err.message || "Some error occurred while retrieving countries." }); }); };